(this.webpackJsonparound_us_react = this.webpackJsonparound_us_react || []).push([[3], {
  17(t, e, n) {
    n.r(e), n.d(e, 'getCLS', (() => m)), n.d(e, 'getFCP', (() => g)), n.d(e, 'getFID', (() => F)), n.d(e, 'getLCP', (() => k)), n.d(e, 'getTTFB', (() => C)); let i; let a; let r; let o; const u = function (t, e) {
      return {
        name: t, value: void 0 === e ? -1 : e, delta: 0, entries: [], id: 'v1-'.concat(Date.now(), '-').concat(Math.floor(8999999999999 * Math.random()) + 1e12),
      };
    }; const c = function (t, e) { try { if (PerformanceObserver.supportedEntryTypes.includes(t)) { const n = new PerformanceObserver(((t) => t.getEntries().map(e))); return n.observe({ type: t, buffered: !0 }), n; } } catch (t) {} }; const s = function (t, e) { const n = function n(i) { i.type !== 'pagehide' && document.visibilityState !== 'hidden' || (t(i), e && (removeEventListener('visibilitychange', n, !0), removeEventListener('pagehide', n, !0))); }; addEventListener('visibilitychange', n, !0), addEventListener('pagehide', n, !0); }; const f = function (t) { addEventListener('pageshow', ((e) => { e.persisted && t(e); }), !0); }; const d = typeof WeakSet === 'function' ? new WeakSet() : new Set(); const p = function (t, e, n) { let i; return function () { e.value >= 0 && (n || d.has(e) || document.visibilityState === 'hidden') && (e.delta = e.value - (i || 0), (e.delta || void 0 === i) && (i = e.value, t(e))); }; }; var m = function (t, e) { let n; let i = u('CLS', 0); const a = function (t) { t.hadRecentInput || (i.value += t.value, i.entries.push(t), n()); }; const r = c('layout-shift', a); r && (n = p(t, i, e), s((() => { r.takeRecords().map(a), n(); })), f((() => { i = u('CLS', 0), n = p(t, i, e); }))); }; let v = -1; const l = function () { return document.visibilityState === 'hidden' ? 0 : 1 / 0; }; const h = function () { s(((t) => { const e = t.timeStamp; v = e; }), !0); }; const S = function () { return v < 0 && (v = l(), h(), f((() => { setTimeout((() => { v = l(), h(); }), 0); }))), { get timeStamp() { return v; } }; }; var g = function (t, e) { let n; const i = S(); let a = u('FCP'); var r = c('paint', ((t) => { t.name === 'first-contentful-paint' && (r && r.disconnect(), t.startTime < i.timeStamp && (a.value = t.startTime, a.entries.push(t), d.add(a), n())); })); r && (n = p(t, a, e), f(((i) => { a = u('FCP'), n = p(t, a, e), requestAnimationFrame((() => { requestAnimationFrame((() => { a.value = performance.now() - i.timeStamp, d.add(a), n(); })); })); }))); }; const y = { passive: !0, capture: !0 }; const w = new Date(); const E = function (t, e) { i || (i = e, a = t, r = new Date(), b(removeEventListener), L()); }; var L = function () {
      if (a >= 0 && a < r - w) {
        const t = {
          entryType: 'first-input', name: i.type, target: i.target, cancelable: i.cancelable, startTime: i.timeStamp, processingStart: i.timeStamp + a,
        }; o.forEach(((e) => { e(t); })), o = [];
      }
    }; const T = function (t) { if (t.cancelable) { const e = (t.timeStamp > 1e12 ? new Date() : performance.now()) - t.timeStamp; t.type == 'pointerdown' ? (function (t, e) { const n = function () { E(t, e), a(); }; const i = function () { a(); }; var a = function () { removeEventListener('pointerup', n, y), removeEventListener('pointercancel', i, y); }; addEventListener('pointerup', n, y), addEventListener('pointercancel', i, y); }(e, t)) : E(e, t); } }; var b = function (t) { ['mousedown', 'keydown', 'touchstart', 'pointerdown'].forEach(((e) => t(e, T, y))); }; var F = function (t, e) { let n; const r = S(); let m = u('FID'); const v = function (t) { t.startTime < r.timeStamp && (m.value = t.processingStart - t.startTime, m.entries.push(t), d.add(m), n()); }; const l = c('first-input', v); n = p(t, m, e), l && s((() => { l.takeRecords().map(v), l.disconnect(); }), !0), l && f((() => { let r; m = u('FID'), n = p(t, m, e), o = [], a = -1, i = null, b(addEventListener), r = v, o.push(r), L(); })); }; var k = function (t, e) { let n; const i = S(); let a = u('LCP'); const r = function (t) { const e = t.startTime; e < i.timeStamp && (a.value = e, a.entries.push(t)), n(); }; const o = c('largest-contentful-paint', r); if (o) { n = p(t, a, e); const m = function () { d.has(a) || (o.takeRecords().map(r), o.disconnect(), d.add(a), n()); }; ['keydown', 'click'].forEach(((t) => { addEventListener(t, m, { once: !0, capture: !0 }); })), s(m, !0), f(((i) => { a = u('LCP'), n = p(t, a, e), requestAnimationFrame((() => { requestAnimationFrame((() => { a.value = performance.now() - i.timeStamp, d.add(a), n(); })); })); })); } }; var C = function (t) { let e; const n = u('TTFB'); e = function () { try { const e = performance.getEntriesByType('navigation')[0] || (function () { const t = performance.timing; const e = { entryType: 'navigation', startTime: 0 }; for (const n in t)n !== 'navigationStart' && n !== 'toJSON' && (e[n] = Math.max(t[n] - t.navigationStart, 0)); return e; }()); n.value = n.delta = e.responseStart, n.entries = [e], t(n); } catch (t) {} }, document.readyState === 'complete' ? setTimeout(e, 0) : addEventListener('pageshow', e); };
  },
}]);
// # sourceMappingURL=3.4b31caad.chunk.js.map
